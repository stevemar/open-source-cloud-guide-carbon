{"componentChunkName":"component---src-pages-guides-serving-apis-mdx","path":"/guides/serving-apis/","result":{"pageContext":{"frontmatter":{"title":"Exposing a service API","description":"Guide for open source AI services on the cloud","date":"15 August 2021"},"relativePagePath":"/guides/serving-apis.mdx","titleType":"page","MdxNode":{"id":"7ad3a975-d63d-58fa-af1f-fba9d3e42bc8","children":[],"parent":"931e5158-7c5d-5884-b288-64cb8675205d","internal":{"content":"---\ntitle: Exposing a service API\ndescription: Guide for open source AI services on the cloud\ndate: 15 August 2021\n---\n\n## Problem\n\nWhile building cloud applications you often discover that logic or data can and should be exposed as an API to be used by other applications or services. This is part of micro services architecture and engineering. Cloud services that would facilitate development and evolution of these service APIs include service API gateways that can limit or control API access, securing ingresses to services, in addition to ability to meter and charge for services.\n\n### Why is this Important for Hybrid Cloud Developers?\n\n1. Every developer needs to expose APIs. Open your services to the world. Each service might have multiple APIs that can be exposed. These APIs could be done to allow integration for external parties, or to allow integration with other applications that the same developer is implementing.\n\n2. Serverless means pay only for what you use. The ideal situation for any developer is to pay for the exact resource consumed and be able to access unlimited resources as needed when scaling is a requirement. Open Serverless environment, such as those based on Knative, are a promising step in that direction. And because it's open it does not lock in and can be adapted to any cloud.\n\n3. Advanced API features now available as a service. When a developer exposes an API there are immediate concerns that she must address. For instance, how to meter the API, how to throttle and deal with rapid scale, how to secure all endpoints, and how to allow retries and other \"corner cases\". Many of these concerns are common across APIs and typically can be dealt with by common services by the cloud provider. For instance, an API Gateway. Is this a valid approach in a Hybrid cloud environment?\n\n## Solution Sketch\n\n* [solution or solution sketche(s)]\n\n### Constraints / Limitations\n\n* [limits to approach]\n\n### Key OSS Techs\n\n* [important OSS technologies used]\n\n### Example Cloud(s)\n\n* [at least two public clouds as examples]\n* [list services and features used for solutions]\n\n## Where to Find More?\n\n### Blogs\n\n* [list of related videos and articles]\n\n### Videos\n\n* [list of related videos]\n\n### Tutorials\n\n* [list of related tutorials]\n","type":"Mdx","contentDigest":"d335dc4174f9defe79239fd67a360ae0","owner":"gatsby-plugin-mdx","counter":87},"frontmatter":{"title":"Exposing a service API","description":"Guide for open source AI services on the cloud","date":"15 August 2021"},"exports":{},"rawBody":"---\ntitle: Exposing a service API\ndescription: Guide for open source AI services on the cloud\ndate: 15 August 2021\n---\n\n## Problem\n\nWhile building cloud applications you often discover that logic or data can and should be exposed as an API to be used by other applications or services. This is part of micro services architecture and engineering. Cloud services that would facilitate development and evolution of these service APIs include service API gateways that can limit or control API access, securing ingresses to services, in addition to ability to meter and charge for services.\n\n### Why is this Important for Hybrid Cloud Developers?\n\n1. Every developer needs to expose APIs. Open your services to the world. Each service might have multiple APIs that can be exposed. These APIs could be done to allow integration for external parties, or to allow integration with other applications that the same developer is implementing.\n\n2. Serverless means pay only for what you use. The ideal situation for any developer is to pay for the exact resource consumed and be able to access unlimited resources as needed when scaling is a requirement. Open Serverless environment, such as those based on Knative, are a promising step in that direction. And because it's open it does not lock in and can be adapted to any cloud.\n\n3. Advanced API features now available as a service. When a developer exposes an API there are immediate concerns that she must address. For instance, how to meter the API, how to throttle and deal with rapid scale, how to secure all endpoints, and how to allow retries and other \"corner cases\". Many of these concerns are common across APIs and typically can be dealt with by common services by the cloud provider. For instance, an API Gateway. Is this a valid approach in a Hybrid cloud environment?\n\n## Solution Sketch\n\n* [solution or solution sketche(s)]\n\n### Constraints / Limitations\n\n* [limits to approach]\n\n### Key OSS Techs\n\n* [important OSS technologies used]\n\n### Example Cloud(s)\n\n* [at least two public clouds as examples]\n* [list services and features used for solutions]\n\n## Where to Find More?\n\n### Blogs\n\n* [list of related videos and articles]\n\n### Videos\n\n* [list of related videos]\n\n### Tutorials\n\n* [list of related tutorials]\n","fileAbsolutePath":"/home/travis/build/stevemar/open-source-cloud-guide-carbon/src/pages/guides/serving-apis.mdx"}}},"staticQueryHashes":["1364590287","137577622","137577622","2102389209","2102389209","2456312558","2746626797","2746626797","3018647132","3018647132","3037994772","3037994772","768070550"]}